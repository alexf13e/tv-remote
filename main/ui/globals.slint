
import { RemoteScreenID } from "remote-screens-index.slint";


export global Logic { //container for functions to interact with c++ from gui
    pure callback remote_btn_press(string, bool);
    pure callback remote_btn_release();

    pure callback sleep();
    pure callback refresh_sleep_timeout();
    pure callback enable_sleep();
    pure callback disable_sleep();

    pure callback enable_auto_brightness();
    pure callback disable_auto_brightness();

    pure callback begin_ir_receive();

    pure callback init_history_screens(int) -> [RemoteScreenID];
    pure callback shift_history_screens([RemoteScreenID]);
}


export global Symbols { //general icon symbols which may want to be used on various screens
    out property <image> arrow-left:    @image-url("icons/buttons/arrow-left.png");
    out property <image> arrow-right:   @image-url("icons/buttons/arrow-right.png");
    out property <image> arrow-up:      @image-url("icons/buttons/arrow-up.png");
    out property <image> arrow-down:    @image-url("icons/buttons/arrow-down.png");

    out property <image> home:          @image-url("icons/buttons/home.png");
    out property <image> nav-back:      @image-url("icons/buttons/nav-back.png");
    out property <image> nav-forward:   @image-url("icons/buttons/nav-forward.png");
    out property <image> nav-list:      @image-url("icons/buttons/nav-list.png");

    out property <image> plus:          @image-url("icons/buttons/plus.png");
    out property <image> minus:         @image-url("icons/buttons/minus.png");
    out property <image> cross:         @image-url("icons/buttons/cross.png");

    out property <image> vol-plus:      @image-url("icons/buttons/volume-plus.png");
    out property <image> vol-minus:     @image-url("icons/buttons/volume-minus.png");
    out property <image> vol-mute:      @image-url("icons/buttons/volume-mute.png");

    out property <image> play:          @image-url("icons/buttons/play.png");
    out property <image> pause:         @image-url("icons/buttons/pause.png");
    out property <image> stop:          @image-url("icons/buttons/stop.png");
    out property <image> rewind:        @image-url("icons/buttons/rewind.png");
    out property <image> fast-forward:  @image-url("icons/buttons/fast-forward.png");
    out property <image> skip-back:     @image-url("icons/buttons/skip-back.png");
    out property <image> skip-forward:  @image-url("icons/buttons/skip-forward.png");

    out property <image> bin:           @image-url("icons/buttons/bin.jpg");
}


export struct ScreenHistoryData { //history data separated to a struct to simplify saving in c++ through sleeps
    capacity: int, //maximum number of screens to remember
    screens: [RemoteScreenID], //the screens which have been visited recently
    front: int, //where in the history we are. screens[front] is the currently displayed screen
    length: int //how many screens are currently remembered
}

export global ScreenHistory { //manage the previously visited screens
    out property <ScreenHistoryData> history;
    property <bool> initialised: false;

    public function init(capacity: int, initial_screen_id: RemoteScreenID) { //use on first power up
        if (capacity < 1) {
            return;
        }
        
        history = {
            capacity: capacity,
            screens: Logic.init_history_screens(capacity), //cannot variably initialise array in slint, have to send to c++
            front: -1,
            length: 0
        };

        initialised = true;
        CurrentDisplayedScreen.set_screen(initial_screen_id);
    }

    public function restore(history: ScreenHistoryData) { //use when restoring from sleep
        self.history = history;
        if (history.capacity < 1) {
            return;
        }

        CurrentDisplayedScreen.set_without_history(history.screens[history.front]);
        initialised = true;
    }

    public function go_back() -> RemoteScreenID { //return the previous screen and move the front of the history back 1 space
        if (!initialised) {
            return RemoteScreenID.SAME;
        }
        
        if (history.front == 0) {
            //we are as far back as we can go already
            return RemoteScreenID.SAME;
        }

        if (history.screens[history.front] != RemoteScreenID.SCREEN_LIST) {
            //if the current screen IS the screen list, then we want to just go back to the screen we were on before
            //opening the screen list. therefore the front should only be moved back when NOT on the screen list
            
            history.front -= 1;
        }
        
        return history.screens[history.front];
    }

    public function go_forward() -> RemoteScreenID { //return the screen after the current one in history, move the front of the history forward 1 space
        if (!initialised) {
            return RemoteScreenID.SAME;
        }
        
        if (history.front == history.length - 1) {
            //we are as far forward as we can go
            return RemoteScreenID.SAME;
        }

        history.front += 1;
        return history.screens[history.front];
    }

    public function append_screen(screen_id: RemoteScreenID) {
        if (!initialised) {
            return;
        }

        if (history.front == history.capacity - 1) {
            //we are at capacity of history, need to forget oldest screen

            //shift array elements down by 1 so the first one is forgotten
            Logic.shift_history_screens(history.screens);

            history.front -= 1; //move front backwards by 1 space, as though the last space in the array was empty
        }

        history.front += 1;
        history.screens[history.front] = screen_id; //put the new screen in the next empty space

        history.length = history.front + 1; //update length to match where front currently is
        //e.g. if we had remembered 10 screens (front = 9), then went back by 3 (front = 6), then went to a new screen
        //(front = 7), the screens after front are no longer part of this branch of history, so length should jump back
        //from 10 to 8 and going forward can't reach the now invalid screens
    }

    pure public function get_back_possible() -> bool {
        return history.front > 0;
    }

    pure public function get_forward_possible() -> bool {
        return history.front < history.length - 1;
    }
}


export global CurrentDisplayedScreen { //manage the currently displayed screen
    out property <RemoteScreenID> id: RemoteScreenID.HOME; //initialised by native code, placeholder for previewing

    function check_special_screen_changes(old_id: RemoteScreenID, new_id: RemoteScreenID) {
        if (new_id == RemoteScreenID.IR_RECEIVE) {
            Logic.disable_sleep(); //when on this screen, disable sleep as device may not be touched for a few seconds while learning codes
        }

        if (old_id == RemoteScreenID.IR_RECEIVE) { //leaving receive screen, re-enable sleep
            Logic.enable_sleep();
        }
    }

    //change the displayed screen and update the history if relevant
    public function set_screen(new_id: RemoteScreenID) {
        if (new_id != RemoteScreenID.SAME) {
            check_special_screen_changes(id, new_id);

            id = new_id;

            if (new_id != RemoteScreenID.SCREEN_LIST) {
                if (ScreenHistory.history.front == -1) { //this is the initial screen being set
                    ScreenHistory.append_screen(id);
                    return;
                }

                //if the front screen is valid, ensure we don't add it twice in a row in the history
                if (new_id != ScreenHistory.history.screens[ScreenHistory.history.front]) {
                    ScreenHistory.append_screen(id);
                }
            }
        }
    }

    //for setting screen without affecting history. used when restoring history and when navigating forward/back
    public function set_without_history(new_id: RemoteScreenID) {
        if (new_id != RemoteScreenID.SAME) {
            check_special_screen_changes(id, new_id);
            id = new_id;
        }
    }
}


export global DisableIRButtons {
    in-out property <bool> active: false;

    /*
    desired behaviour is:
    when a button is pressed that makes an ir code happen:
        the release of that button should be allowed to change the screen.
        the release of any other buttons should not.
        the press of any other button should still be registered. the code that button would send (if any) will be
        blocked in c++, and holding it should mean that as soon as ir codes are able to be sent again, it will start
        repeating.

    when a button is pressed that only changes a screen:
        always allow it to change the screen.


    since the specific button cannot (easily) be tracked and allowed, instead note a specific screen which can be
    changed to by a button that also sends an ir signal, with no effect on buttons that only change screen. this means
    other buttons that send ir and change screen cannot run in a way that the screen is changed but the ir didnt run.

    the permitted screen can only be changed when it is not currently valid, and is reset when the action list is
    finished sending

    it would still be possible to start an action list, have the screen change, move to another screen, then press
    another button that would change to the same screen. the screen change would happen and the ir code wouldn't, but at
    that point its beyond accidentally pressing a button too soon and wondering why the ir code didn't send...
    */
    out property <RemoteScreenID> permitted_screen_change: RemoteScreenID.SAME;
    
    callback _set_permitted_screen_change(RemoteScreenID);
    callback clear_permitted_screen_change();

    _set_permitted_screen_change(id) => {
        if permitted_screen_change == RemoteScreenID.SAME {
            permitted_screen_change = id;
        }
    }

    clear_permitted_screen_change() => {
        permitted_screen_change = RemoteScreenID.SAME;
    }

}

export global ScreenListTabID {
    in-out property <int> value: 0;
}

export global IRProgress {
    in-out property <float> value;
    in-out property <bool> visible: false;
}

export global Theme {
    out property <length> default_font_size: 18px;
    out property <length> larger_font_size: 24px;

    out property <color> background_colour: black;
    out property <color> default_general_text_colour: white;

    out property <color> default_btn_bg_colour: white;
    out property <color> default_btn_text_colour: black;
    out property <color> default_btn_icon_colourize: transparent;

    out property <color> power_bg_colour: orange;
    out property <color> av_bg_colour: yellow;
    out property <color> record_bg_colour: red;
    out property <color> info_bg_colour: lime;
    out property <color> nav_arrow_bg_colour: gray;
    out property <color> volume_bg_colour: cyan;
    out property <color> chan_bg_colour: lightskyblue;
    out property <color> ir_progress_bg_colour: green;

    out property <color> power_fg_colour: black;
    out property <color> av_fg_colour: black;
    out property <color> record_fg_colour: white;
    out property <color> info_fg_colour: black;
    out property <color> nav_arrow_fg_colour: black;
    out property <color> volume_fg_colour: black;
    out property <color> chan_fg_colour: black;
    out property <color> ir_progress_fg_colour: white;

    out property <color> playback_bg_colour_1: lime;
    out property <color> playback_bg_colour_2: red;
    out property <color> playback_bg_colour_3: blue;
    out property <color> playback_bg_colour_4: darkviolet;

    out property <color> playback_fg_colour_1: black;
    out property <color> playback_fg_colour_2: white;
    out property <color> playback_fg_colour_3: white;
    out property <color> playback_fg_colour_4: white;
}