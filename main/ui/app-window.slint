
//the main starting point for the ui
//describes the window which will be displayed over the whole display
//within the window, a "screen" can be selected to have its contents displayed
//this file's contents are the only ones to be directly accessible from c++

import { RemoteScreenID } from "remote-screens-index.slint";
import { CurrentDisplayedScreen } from "globals.slint";
import { HomeScreen } from "screens/home-screen.slint";
import { ChannelScreen } from "screens/channel-screen.slint";
import { TVAllButtonsScreen } from "screens/tv-all-buttons-screen.slint";
import { SpeakersAllButtonsScreen } from "screens/speakers-all-buttons-screen.slint";
import { HDDAllButtonsScreen } from "screens/hdd-all-buttons-screen.slint";
import { YouViewAllButtonsScreen } from "screens/youview-all-buttons-screen.slint";
import { IRReceiveScreen } from "screens/ir-receive-screen.slint";

export { Logic, CurrentDisplayedScreen } from "globals.slint"; //export Logic so it can be accessed by c++


export component AppWindow inherits Window {
    width: 480px;
    height: 800px;
    background: #000000;
    default-font-size: 14px;

    callback load_remembered_screen(RemoteScreenID);
    load_remembered_screen(id) => {
        CurrentDisplayedScreen.set(id);
    }

    VerticalLayout { //container rectangle for padding around edge for all screens
        padding: 10px;

        if CurrentDisplayedScreen.id == RemoteScreenID.HOME: HomeScreen {}
        if CurrentDisplayedScreen.id == RemoteScreenID.TV_CHANNELS: ChannelScreen {}
        if CurrentDisplayedScreen.id == RemoteScreenID.TV_ALL_BUTTONS: TVAllButtonsScreen {}
        if CurrentDisplayedScreen.id == RemoteScreenID.SPEAKERS_ALL_BUTTONS: SpeakersAllButtonsScreen {}
        if CurrentDisplayedScreen.id == RemoteScreenID.HDD_ALL_BUTTONS: HDDAllButtonsScreen {}
        if CurrentDisplayedScreen.id == RemoteScreenID.YOUVIEW_ALL_BUTTONS: YouViewAllButtonsScreen {}
        if CurrentDisplayedScreen.id == RemoteScreenID.IR_RECEIVE: IRReceiveScreen {}
    }
}