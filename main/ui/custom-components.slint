
import { Button, TextEdit, ProgressIndicator } from "std-widgets.slint";
import { RemoteButtonData, ChannelButtonData } from "custom-component-data.slint";
import { RemoteScreenID } from "remote-screens-index.slint";
import { Logic, CurrentDisplayedScreen, Symbols, ScreenHistory, DisableIRButtons, IRProgress, Theme } from "globals.slint";


export component RemoteButton { //custom button for sending remote signals and navigating the ui
    in property <color> bg_colour: Theme.default_btn_bg_colour;
    in property <color> text_colour: Theme.default_btn_text_colour;
    in property <image> icon;                                   //image to show on button
    in property <color> icon_colourize: Theme.default_btn_icon_colourize;
    in property <string> text;                                  //text to show on button
    in property <length> font_size: Theme.default_font_size;
    in property <string> action_list_id: "";                      //name of the "macro" to play when button is pressed
    in property <RemoteScreenID> screen_id: RemoteScreenID.SAME; //the id of the screen which will be shown when this button is clicked
    in property <bool> repeat_on_hold: false;
    in property <bool> enabled: true;
    //in property <string> path_shape: "";

    out property <bool> held: false;

    property <bool> disable_override: DisableIRButtons.active && action_list_id != "" && DisableIRButtons.permitted_screen_change != root.screen_id;

    callback press_down();
    callback press_release();

    preferred-width: 0;
    preferred-height: 0;

    Rectangle { //rectangle for the whole button shape
        //if a path is not specified, display as a rectangle with the given background colour
        //otherwise, don't draw a background on the rectangle
        //background: path_shape == "" ? bg_colour : transparent;
        background: bg_colour;


        //if path shape is specified, draw the path
        // if path_shape != "": Path {
        //     commands: path_shape;
        //     fill: bg_colour;
        // }

        Image { //image to display button icon
            width: parent.width;
            height: parent.height;
            image-fit: ImageFit.contain;
            source: icon;
            colorize: icon_colourize;
        }

        Text {
            width: parent.width;
            font-size: font_size;
            wrap: word-wrap;
            horizontal-alignment: center;
            text: text;
            color: text_colour;
        }

    if enabled: touch := TouchArea { //toucharea to detect the button being pressed (when enabled)
            pointer-event(event) => {
                Logic.refresh_sleep_timeout();
                
                if event.kind == PointerEventKind.down {
                    if root.action_list_id != "" {
                        DisableIRButtons._set_permitted_screen_change(root.screen_id);
                    }
                    
                    Logic.remote_btn_press(root.action_list_id, root.repeat_on_hold);
                    root.press_down();
                    held = true;
                }

                if event.kind == PointerEventKind.up && held == true {
                    if !disable_override {
                        CurrentDisplayedScreen.set_screen(root.screen_id);
                    }
                    
                    root.press_release();
                    Logic.remote_btn_release();
                    held = false;
                }
            }
        }

        if (held || !enabled) && !disable_override: Rectangle { //when the button is pressed, shade it darker for visual feedback
            background: #0000007f;
        }

        if held && disable_override: Rectangle {
            background: #ff00007f;
        }
    }
}

// export component RemoteButtonCircle inherits RemoteButton {
//     path_shape: "M 1 0 A 1 1 0 0 0 -1 0 A 1 1 0 0 0 1 0";
// }


component RemoteNavPanel { //panel with bottom navigation buttons to replicate pronto layout
    in property <string> al_chan_up;
    in property <string> al_chan_down;
    in property <string> al_mute;
    in property <string> al_vol_up;
    in property <string> al_vol_down;
    
    in property <string> al_navLeft; //action list id for nav buttons (e.g. for tv or recording box)
    in property <string> al_navRight;
    in property <string> al_navUp;
    in property <string> al_navDown;

    in property <string> al_ok;
    in property <string> al_return;
    in property <string> al_exit;
    in property <string> al_info;

    property <length> btn_spacing: 10px;
    property <length> section_spacing: self.width * 0.1;
    property <length> mid_grid_width: self.width * 0.55;
    property <length> side_btn_width: (self.width - mid_grid_width - section_spacing * 2) / 2;
    
    height: 150px;
    
    HorizontalLayout {
        height: 100%;
        spacing: section_spacing;
        alignment: space-between;
        
        VerticalLayout {
            spacing: btn_spacing;
            width: side_btn_width;
            
            RemoteButton {
                icon: Symbols.arrow-up;
                action_list_id: al_chan_up;
                repeat_on_hold: true;
                bg_colour: Theme.chan_bg_colour;
                icon_colourize: Theme.chan_fg_colour;
            }

            RemoteButton {
                icon: Symbols.arrow-down;
                action_list_id: al_chan_down;
                repeat_on_hold: true;
                bg_colour: Theme.chan_bg_colour;
                icon_colourize: Theme.chan_fg_colour;
            }
        }

        GridLayout {
            spacing: btn_spacing;
            width: mid_grid_width;

            Row {
                RemoteButton {
                    text: "INFO";
                    action_list_id: al_info;
                    bg_colour: Theme.info_bg_colour;
                    text_colour: Theme.info_fg_colour;
                }
                
                RemoteButton {
                    icon: Symbols.arrow-up;
                    action_list_id: al_navUp;
                    repeat_on_hold: true;
                    bg_colour: Theme.nav_arrow_bg_colour;
                    text_colour: Theme.nav_arrow_fg_colour;
                }
    
                RemoteButton {
                    text: "EXIT";
                    action_list_id: al_exit;
                }
            }
            
            Row {
                RemoteButton {
                    icon: Symbols.arrow-left;
                    action_list_id: al_navLeft;
                    repeat_on_hold: true;
                    bg_colour: Theme.nav_arrow_bg_colour;
                    text_colour: Theme.nav_arrow_fg_colour;
                }

                RemoteButton {
                    text: "OK";
                    action_list_id: al_ok;
                }

                RemoteButton {
                    icon: Symbols.arrow-right;
                    action_list_id: al_navRight;
                    repeat_on_hold: true;
                    bg_colour: Theme.nav_arrow_bg_colour;
                    text_colour: Theme.nav_arrow_fg_colour;
                }
            }

            Row {
                RemoteButton {
                    text: "RETN";
                    action_list_id: al_return;
                }

                RemoteButton {
                    icon: Symbols.arrow-down;
                    action_list_id: al_navDown;
                    repeat_on_hold: true;
                    bg_colour: Theme.nav_arrow_bg_colour;
                    text_colour: Theme.nav_arrow_fg_colour;
                }

                RemoteButton {
                    icon: Symbols.vol-mute;
                    action_list_id: al_mute;
                    bg_colour: Theme.volume_bg_colour;
                    icon_colourize: Theme.volume_fg_colour;
                }
            }
        }
        
        VerticalLayout {
            spacing: btn_spacing;
            width: side_btn_width;

            RemoteButton {
                icon: Symbols.vol-plus;
                action_list_id: al_vol_up;
                repeat_on_hold: true;
                bg_colour: Theme.volume_bg_colour;
                icon_colourize: Theme.volume_fg_colour;
            }

            RemoteButton {
                icon: Symbols.vol-minus;
                action_list_id: al_vol_down;
                repeat_on_hold: true;
                bg_colour: Theme.volume_bg_colour;
                icon_colourize: Theme.volume_fg_colour;
            }
        }
    }
}

export component TVRemoteNavPanel inherits RemoteNavPanel {
    al_chan_up: "TV_CHAN_UP";
    al_chan_down: "TV_CHAN_DOWN";
    al_mute: "SPEAKERS_MUTE";
    al_vol_up: "SPEAKERS_VOL_UP";
    al_vol_down: "SPEAKERS_VOL_DOWN";

    al_navLeft: "TV_NAV_LEFT";
    al_navRight: "TV_NAV_RIGHT";
    al_navUp: "TV_NAV_UP";
    al_navDown: "TV_NAV_DOWN";

    al_ok: "TV_OK";
    al_return: "TV_RETURN";
    al_exit: "TV_EXIT";
    al_info: "TV_INFO";
}

export component HDRRemoteNavPanel inherits RemoteNavPanel {
    al_chan_up: "HDR_CHAN_UP";
    al_chan_down: "HDR_CHAN_DOWN";
    al_mute: "SPEAKERS_MUTE";
    al_vol_up: "SPEAKERS_VOL_UP";
    al_vol_down: "SPEAKERS_VOL_DOWN";

    al_navLeft: "HDR_NAV_LEFT";
    al_navRight: "HDR_NAV_RIGHT";
    al_navUp: "HDR_NAV_UP";
    al_navDown: "HDR_NAV_DOWN";

    al_ok: "HDR_OK";
    al_return: "HDR_RETURN";
    al_exit: "HDR_EXIT";
    al_info: "HDR_INFO";
}

export component YouViewRemoteNavPanel inherits RemoteNavPanel {
    al_chan_up: "YOUVIEW_CHAN_UP";
    al_chan_down: "YOUVIEW_CHAN_DOWN";
    al_mute: "SPEAKERS_MUTE";
    al_vol_up: "SPEAKERS_VOL_UP";
    al_vol_down: "SPEAKERS_VOL_DOWN";

    al_navLeft: "YOUVIEW_NAV_LEFT";
    al_navRight: "YOUVIEW_NAV_RIGHT";
    al_navUp: "YOUVIEW_NAV_UP";
    al_navDown: "YOUVIEW_NAV_DOWN";

    al_ok: "YOUVIEW_OK";
    al_return: "YOUVIEW_BACK";
    al_exit: "YOUVIEW_CLOSE";
    al_info: "YOUVIEW_INFO";
}


component PlaybackControlPanel {
    in property <string> al_play;
    in property <string> al_pause;
    in property <string> al_stop;

    in property <string> al_rewind;
    in property <string> al_fast_forward;
    in property <string> al_skip_back;
    in property <string> al_skip_forward;

    in property <string> skip_text;
    in property <image> skip_forward_icon: Symbols.skip-forward;

    GridLayout {
        spacing: 10px;

        RemoteButton {
            row: 0;
            col: 0;
            icon: Symbols.skip-back;
            action_list_id: al_skip_back;
            bg_colour: Theme.playback_bg_colour_4;
            icon_colourize: Theme.playback_fg_colour_4;
        }

        RemoteButton {
            row: 0;
            col: 2;
            icon: skip_forward_icon;
            text: skip_text;
            text_colour: Theme.playback_fg_colour_4;
            action_list_id: al_skip_forward;
            bg_colour: Theme.playback_bg_colour_4;
            icon_colourize: Theme.playback_fg_colour_4;
        }

        RemoteButton {
            row: 1;
            col: 1;
            icon: Symbols.pause;
            action_list_id: al_pause;
            bg_colour: Theme.playback_bg_colour_3;
            icon_colourize: Theme.playback_fg_colour_3;
        }

        RemoteButton {
            row: 2;
            col: 1;
            icon: Symbols.play;
            action_list_id: al_play;
            bg_colour: Theme.playback_bg_colour_1;
            icon_colourize: Theme.playback_fg_colour_1;
        }

        RemoteButton {
            row: 2;
            col: 0;
            icon: Symbols.rewind;
            action_list_id: al_rewind;
            bg_colour: Theme.playback_bg_colour_3;
            icon_colourize: Theme.playback_fg_colour_3;
        }

        RemoteButton {
            row: 2;
            col: 2;
            icon: Symbols.fast-forward;
            action_list_id: al_fast_forward;
            bg_colour: Theme.playback_bg_colour_3;
            icon_colourize: Theme.playback_fg_colour_3;
        }

        RemoteButton {
            row: 3;
            col: 1;
            icon: Symbols.stop;
            action_list_id: al_stop;
            bg_colour: Theme.playback_bg_colour_2;
            icon_colourize: Theme.playback_fg_colour_2;
        }

        @children
    }
}

export component TVPlaybackControlPanel inherits PlaybackControlPanel {
    al_play: "TV_PLAY";
    al_pause: "TV_PAUSE";
    al_stop: "TV_STOP";

    al_rewind: "TV_REWIND";
    al_fast_forward: "TV_FAST_FORWARD";
    al_skip_back: "TV_SKIP_BACK";
    al_skip_forward: "TV_SKIP_FORWARD";
}

export component HDRRecordingPlaybackControlPanel inherits PlaybackControlPanel {
    al_play: "HDR_PLAY";
    al_pause: "HDR_PAUSE";
    al_stop: "HDR_STOP";

    al_rewind: "HDR_REWIND";
    al_fast_forward: "HDR_FAST_FORWARD";
    al_skip_forward: "HDR_MANUAL_SKIP_PLUS_60";

    skip_forward_icon: @image-url("");
    skip_text: "+60s";

    RemoteButton {
        row: 0;
        col: 0;
        z: 1;
        text: "LIBRARY";
        action_list_id: "HDR_VIDEO_MENU";
    }
}

export component HDRDVDPlaybackControlPanel inherits PlaybackControlPanel {
    al_play: "HDR_PLAY";
    al_pause: "HDR_PAUSE";
    al_stop: "HDR_STOP";

    al_rewind: "HDR_REWIND";
    al_fast_forward: "HDR_FAST_FORWARD";
    al_skip_forward: "HDR_MANUAL_SKIP_PLUS_60";
}

export component YouViewPlaybackControlPanel inherits PlaybackControlPanel {
    al_play: "YOUVIEW_PLAY";
    al_pause: "YOUVIEW_PAUSE";
    al_stop: "YOUVIEW_STOP";

    al_rewind: "YOUVIEW_REWIND";
    al_fast_forward: "YOUVIEW_FAST_FORWARD";
    al_skip_back: "YOUVIEW_SKIP_BACK";
    al_skip_forward: "YOUVIEW_SKIP_FORWARD";
}


export component NumberGrid {
    in property <string> al_0;
    in property <string> al_1;
    in property <string> al_2;
    in property <string> al_3;
    in property <string> al_4;
    in property <string> al_5;
    in property <string> al_6;
    in property <string> al_7;
    in property <string> al_8;
    in property <string> al_9;

    
    GridLayout {
        spacing: 10px;
        
        Row {
            RemoteButton {
                text: "1";
                action_list_id: al_1;
            }
    
            RemoteButton {
                text: "2";
                action_list_id: al_2;
            }
    
            RemoteButton {
                text: "3";
                action_list_id: al_3;
            }
        }

        Row {
            RemoteButton {
                text: "4";
                action_list_id: al_4;
            }
    
            RemoteButton {
                text: "5";
                action_list_id: al_5;
            }
    
            RemoteButton {
                text: "6";
                action_list_id: al_6;
            }
        }

        Row {
            RemoteButton {
                text: "7";
                action_list_id: al_7;
            }
    
            RemoteButton {
                text: "8";
                action_list_id: al_8;
            }
    
            RemoteButton {
                text: "9";
                action_list_id: al_9;
            }
        }

        Row {
            RemoteButton {
                col: 1;
                text: "0";
                action_list_id: al_0;
            }

            @children
        }
    }
}

export component TVNumberGrid inherits NumberGrid {
    al_0: "TV_KEY_0";
    al_1: "TV_KEY_1";
    al_2: "TV_KEY_2";
    al_3: "TV_KEY_3";
    al_4: "TV_KEY_4";
    al_5: "TV_KEY_5";
    al_6: "TV_KEY_6";
    al_7: "TV_KEY_7";
    al_8: "TV_KEY_8";
    al_9: "TV_KEY_9";
}

export component HDRNumberGrid inherits NumberGrid {
    al_0: "HDR_KEY_0";
    al_1: "HDR_KEY_1";
    al_2: "HDR_KEY_2";
    al_3: "HDR_KEY_3";
    al_4: "HDR_KEY_4";
    al_5: "HDR_KEY_5";
    al_6: "HDR_KEY_6";
    al_7: "HDR_KEY_7";
    al_8: "HDR_KEY_8";
    al_9: "HDR_KEY_9";
}

export component YoUViewNumberGrid inherits NumberGrid {
    al_0: "YOUVIEW_KEY_0";
    al_1: "YOUVIEW_KEY_1";
    al_2: "YOUVIEW_KEY_2";
    al_3: "YOUVIEW_KEY_3";
    al_4: "YOUVIEW_KEY_4";
    al_5: "YOUVIEW_KEY_5";
    al_6: "YOUVIEW_KEY_6";
    al_7: "YOUVIEW_KEY_7";
    al_8: "YOUVIEW_KEY_8";
    al_9: "YOUVIEW_KEY_9";
}


component MultiPageRemoteButtonGrid { //automatically populated grid spanning multiple pages
    //properties for creating the grid page, to be passed in to it
    in property <int> num_cols;
    in property <int> num_rows;
    in property <length> button_width;
    in property <length> button_height;
    in property <[RemoteButtonData]> grid_data;

    //cheat for per-remote channel action lists without making another very similar component
    in property <string> action_list_id_prefix;

    //determine the range of buttons in grid_data to show based on the current page number and how many to show per page
    property <int> current_pagenum: 0;
    property <int> iMin: current_pagenum * num_cols * num_rows;
    property <int> iMax: min(iMin + num_cols * num_rows, grid_data.length);

    property <int> num_sub_screens: ceil(grid_data.length / (num_cols * num_rows)); //how many sub screens of buttons

    //calculate spacing between buttons manually, cannot use grid with for loop
    property <length> horizontal_spacing: (grid_container.width - num_cols * button_width) / (num_cols - 1);
    property <length> vertical_spacing: (grid_container.height - num_rows * button_height) / (num_rows - 1);

    function set_pagenum(pagenum: int) {
        current_pagenum = pagenum;
        iMin = current_pagenum * num_cols * num_rows;
        iMax = min(iMin + num_cols * num_rows, grid_data.length);
    }


    VerticalLayout {
        spacing: 10px;

        grid_container := Rectangle { //container for buttons for this sub screen
            for i in (iMax - iMin):
            RemoteButton {
                x: floor(i / num_rows) * (button_width + horizontal_spacing);
                y: mod(i, num_rows) * (button_height + vertical_spacing);
                width: button_width;
                height: button_height;

                icon: grid_data[i + iMin].icon;
                text: grid_data[i + iMin].text;
                action_list_id: action_list_id_prefix + grid_data[i + iMin].action_list_id;
                repeat_on_hold: grid_data[i + iMin].repeat_on_hold;
            }
        }
        
        if num_sub_screens > 1: HorizontalLayout { //navigation buttons between sub screens
            RemoteButton {
                height: 40px;
                icon: Symbols.arrow-left;
                enabled: current_pagenum > 0;

                press_release => {
                    if current_pagenum > 0 {
                        set_pagenum(current_pagenum - 1);
                    }
                }
            }

            Text {
                text: current_pagenum + 1 + "/" + num_sub_screens;
                vertical-alignment: center;
                horizontal-alignment: center;
                color: white;
            }

            RemoteButton {
                height: 40px;
                icon: Symbols.arrow-right;
                enabled: current_pagenum < num_sub_screens - 1;

                press_release => {
                    if current_pagenum < num_sub_screens - 1 {
                        set_pagenum(current_pagenum + 1);
                    }
                }
            }
        }
    }
}

export component TVChannelGrid inherits MultiPageRemoteButtonGrid {
    num_cols: 5;
    num_rows: 5;
    button_width : 80px;
    button_height : 70px;
    grid_data: ChannelButtonData.data;
    action_list_id_prefix: "TV_";
}

export component HDRChannelGrid inherits MultiPageRemoteButtonGrid {
    num_cols: 5;
    num_rows: 5;
    button_width : 80px;
    button_height : 70px;
    grid_data: ChannelButtonData.data;
    action_list_id_prefix: "HDR_";
}

export component YouViewChannelGrid inherits MultiPageRemoteButtonGrid {
    num_cols: 5;
    num_rows: 5;
    button_width : 80px;
    button_height : 70px;
    grid_data: ChannelButtonData.data;
    action_list_id_prefix: "YOUVIEW_";
}


export component RemoteButtonDebugGrid inherits MultiPageRemoteButtonGrid {
    in property <[RemoteButtonData]> data;
    
    preferred-width: 100%;
    preferred-height: 100%;
    
    num_cols: 4;
    num_rows: 8;
    button_width: 80px;
    button_height: 60px;
}


export component MiscButtonPopup {
    z: 100;
    padding: 10px;
    property <length> spacing: 10px;

    callback hide_misc_buttons_popup();

    VerticalLayout {
        Rectangle {
            TouchArea {
                clicked => {
                    hide_misc_buttons_popup();
                }
            }

            background: #000000C0;
            height: 580px;
        }


        Rectangle {
            background: Theme.background_colour; //outline rectangle
    
            VerticalLayout { //layout just to get padding, as rectangle padding doesn't work
                padding: root.padding;
                
                Rectangle { //main background rectangle
                    background: Theme.background_colour;
    
                    TouchArea {} //prevent touches on background from going through to buttons behind popup
                    
                    VerticalLayout { //vertical layout for each row of buttons. rows may have different amounts, so not using grid layout
                        spacing: root.spacing;
        
                        HorizontalLayout {
                            spacing: root.spacing;
        
                            RemoteButton {
                                text: "SPKR POWER";
                                action_list_id: "SPEAKERS_POWER";
                                bg_colour: Theme.power_bg_colour;
                                text_colour: Theme.power_fg_colour;
                            }
                
                            RemoteButton {
                                text: "TV POWER";
                                action_list_id: "TV_POWER";
                                bg_colour: Theme.power_bg_colour;
                                text_colour: Theme.power_fg_colour;
                            }
                
                            RemoteButton {
                                text: "HDR POWER";
                                action_list_id: "HDR_POWER";
                                bg_colour: Theme.power_bg_colour;
                                text_colour: Theme.power_fg_colour;
                            }
                
                            RemoteButton {
                                text: "YOUVIEW POWER";
                                action_list_id: "YOUVIEW_POWER";
                                bg_colour: Theme.power_bg_colour;
                                text_colour: Theme.power_fg_colour;
                            }
                        }
        
                        HorizontalLayout {
                            spacing: root.spacing;
        
                            RemoteButton {
                                text: "SPKR TV";
                                action_list_id: "SPEAKERS_TV_AUDIO";
                                bg_colour: Theme.volume_bg_colour;
                                icon_colourize: Theme.volume_fg_colour;
                            }
        
                            RemoteButton {
                                text: "SPKR HDR";
                                action_list_id: "SPEAKERS_MEDIA_PLAYER";
                                bg_colour: Theme.volume_bg_colour;
                                icon_colourize: Theme.volume_fg_colour;
                            }
        
                            RemoteButton {
                                text: "SPKR YVIEW";
                                action_list_id: "SPEAKERS_CBL_SAT";
                                bg_colour: Theme.volume_bg_colour;
                                icon_colourize: Theme.volume_fg_colour;
                            }
        
                            RemoteButton {
                                text: "SPKR RADIO";
                                action_list_id: "SPEAKERS_TUNER";
                                bg_colour: Theme.volume_bg_colour;
                                icon_colourize: Theme.volume_fg_colour;
                            }
    
                            RemoteButton {
                                text: "TV AV";
                                action_list_id: "TV_INPUT_AV";
                                bg_colour: Theme.av_bg_colour;
                                text_colour: Theme.av_fg_colour;
                            }
                        }
        
                        HorizontalLayout {
                            alignment: end;
                            
                            RemoteButton {
                                width: 100%;
                                height: 40px;
                                text: "CLOSE";
    
                                press_release => {
                                    hide_misc_buttons_popup();
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    
}

export component UINavPanel { //navigation buttons at bottom of screen for for going back/forward screens and to screen list
    callback show_misc_buttons_popup();
    
    HorizontalLayout {
        spacing: 10px;
    
        RemoteButton {
            icon: Symbols.nav-list;
            press_release => {
                CurrentDisplayedScreen.set_without_history(RemoteScreenID.SCREEN_LIST);
            }
        }

        RemoteButton {
            icon: Symbols.home;
            press_release => {
                CurrentDisplayedScreen.set_screen(RemoteScreenID.HOME);
            }
        }

        RemoteButton {
            text: "RESET AV";
            bg_colour: Theme.av_bg_colour;

            press_release => {
                //show popup containing helpful buttons that may want to be accessed from anywhere (power, av, etc.)
                show_misc_buttons_popup();
            }
        }
    }
}

export component IRProgressIndicator {    
    visible: IRProgress.visible;

    Rectangle {
        background: Theme.background_colour;
        
        Text {
            z: 1;
            width: 100%;
            height: 100%;
            text: "Sending IR Code...";
            font-size: 24px;
            color: Theme.ir_progress_fg_colour;
            horizontal-alignment: center;
            vertical-alignment: center;
        }

        HorizontalLayout {
            padding: 10px;
            alignment: start;
    
            Rectangle {
                background: Theme.ir_progress_bg_colour;
                width: IRProgress.value * (parent.width - parent.padding * 2);
            }
        }
    }
}
